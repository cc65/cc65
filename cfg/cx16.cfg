FEATURES {
    STARTADDRESS: default = $0801;
}
SYMBOLS {
    __LOADADDR__:     type = import;
    __EXEHDR__:       type = import;
    __STACKSIZE__:    type = weak,   value = $0800; # 2k stack
    __HIMEM__:        type = weak,   value = $9F00;
}
MEMORY {
    ZP:       file = "", define = yes, start = $0022,                size = $0080 - $0022;
    LOADADDR: file = %O,               start = %S - 2,               size = $0002;
    HEADER:   file = %O, define = yes, start = %S,                   size = $000D;
    MAIN:     file = %O, define = yes, start = __HEADER_LAST__,      size = __HIMEM__ - __HEADER_LAST__;
    BSS:      file = "",               start = __ONCE_RUN__,         size = __HIMEM__ - __ONCE_RUN__ - __STACKSIZE__;
}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    EXTZP:    load = ZP,       type = zp, optional = yes;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = MAIN,     type = ro, optional = yes;
    LOWCODE:  load = MAIN,     type = ro, optional = yes;
    CODE:     load = MAIN,     type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = rw, optional = yes;
    ONCE:     load = MAIN,     type = ro,                 define = yes;
    BSS:      load = BSS,      type = bss,                define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
