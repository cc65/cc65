SYMBOLS {
    __STACKSIZE__:        type = weak, value = $0800; # 2k stack
    __STARTOFDIRECTORY__: type = weak, value = $00CB; # start just after loader
    __BANK0BLOCKSIZE__:   type = weak, value = $0400; # bank 0 cart block size
    __BANK1BLOCKSIZE__:   type = weak, value = $0000; # bank 1 block size
    __EXEHDR__:           type = import;
    __BOOTLDR__:          type = import;
    __UPLOADER__:         type = import;
    __UPLOADERSIZE__:     type = export, value = $61;
    __HEADERSIZE__:       type = export, value = 64;
}
MEMORY {
    ZP:     file = "", define = yes, start = $0000, size = $0100;
    HEADER: file = %O,               start = $0000, size = __HEADERSIZE__;
    BOOT:   file = %O,               start = $0200, size = __STARTOFDIRECTORY__;
    DIR:    file = %O,               start = $0000, size = 16;
    MAIN:   file = %O, define = yes, start = $0200, size = $C038 - __UPLOADERSIZE__ - $200 - __STACKSIZE__;
    UPLOAD: file = %O, define = yes, start = $C038 - __UPLOADERSIZE__, size = $0061;
}
SEGMENTS {
    ZEROPAGE: load = ZP,     type = zp;
    EXTZP:    load = ZP,     type = zp,                optional = yes;
    APPZP:    load = ZP,     type = zp,                optional = yes;
    EXEHDR:   load = HEADER, type = ro;
    BOOTLDR:  load = BOOT,   type = ro;
    DIRECTORY:load = DIR,    type = ro;
    STARTUP:  load = MAIN,   type = ro,  define = yes;
    LOWCODE:  load = MAIN,   type = ro,  define = yes, optional = yes;
    ONCE:     load = MAIN,   type = ro,  define = yes, optional = yes;
    CODE:     load = MAIN,   type = ro,  define = yes;
    RODATA:   load = MAIN,   type = ro,  define = yes;
    DATA:     load = MAIN,   type = rw,  define = yes;
    BSS:      load = MAIN,   type = bss, define = yes;
    UPCODE:   load = UPLOAD, type = ro,  define = yes;
    UPDATA:   load = UPLOAD, type = rw,  define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
