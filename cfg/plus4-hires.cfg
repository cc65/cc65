# Linker configuration that allows for a hi-res bitmap at $C000-$DF3F, but
# puts the stack (and a "HIBSS" segment) in the remaining RAM at $DF40-$FD00.

FEATURES {
    STARTADDRESS: default = $1001;
}
SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
    __HIMEM__:     type = weak, value = $FD00;
}
MEMORY {
    # Reserve 8000 bytes at $C000 for 320x200 bitmap
    RESERVED: file = "", define = yes, start = $C000,             size = 8000;

    ZP:       file = "", define = yes, start = $0002,             size = $001A;
    LOADADDR: file = %O,               start = %S - 2,            size = $0002;
    HEADER:   file = %O, define = yes, start = %S,                size = $000D;
    MAIN:     file = %O, define = yes, start = __HEADER_LAST__,   size = __RESERVED_START__ - __MAIN_START__;

    # Space between bitmap and top of memory
    HIRAM:    file = "", define = yes, start = __RESERVED_LAST__, size = __HIMEM__ - __HIRAM_START__ - __STACKSIZE__;
}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = MAIN,     type = ro;
    LOWCODE:  load = MAIN,     type = ro,  optional = yes;
    CODE:     load = MAIN,     type = ro;
    ONCE:     load = MAIN,     type = ro,  optional = yes;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = bss;
    BSS:      load = MAIN,     type = bss, define   = yes;

    # Allow data between bitmap and top of memory to be used as a second BSS
    # space. Define symbols for it so that it can be supplied to _heapadd().
    HIBSS:    load = HIRAM,    type = bss, optional = yes, define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
