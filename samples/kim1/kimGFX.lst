ca65 V2.19 - Git 30430e87b
Main file   : kimGFX.s
Current file: kimGFX.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 30430e87b
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 30430e87b"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_printf
000000r 1               	.import		_abs
000000r 1               	.import		_ClearScreen
000000r 1               	.import		_ScrollScreen
000000r 1               	.import		_DrawCircle
000000r 1               	.import		_SetPixel
000000r 1               	.import		_ClearPixel
000000r 1               	.import		_DrawChar
000000r 1               	.import		_Demo
000000r 1               	.import		_ReverseBits
000000r 1               	.import		_font8x8_basic
000000r 1               	.import		_x1cord
000000r 1               	.import		_y1cord
000000r 1               	.import		_y2cord
000000r 1               	.import		_cursorX
000000r 1               	.import		_cursorY
000000r 1               	.export		_screen
000000r 1               	.export		_SETPIXEL
000000r 1               	.export		_DRAWPIXEL
000000r 1               	.export		_c
000000r 1               	.export		_DrawText
000000r 1               	.export		_DrawTextAt
000000r 1               	.export		_DrawLine
000000r 1               	.export		_DrawCircleC
000000r 1               	.export		_MirrorFont
000000r 1               	.export		_DrawScreenMoire
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _screen:
000000r 1  00 A0        	.word	$A000
000002r 1               
000002r 1               .segment	"RODATA"
000000r 1               
000000r 1               S0004:
000000r 1  44 6F 6E 65  	.byte	$44,$6F,$6E,$65,$2C,$20,$65,$78,$69,$74,$69,$6E,$67,$2E,$2E,$2E
000004r 1  2C 20 65 78  
000008r 1  69 74 69 6E  
000010r 1  0D 0A 00     	.byte	$0D,$0A,$00
000013r 1               
000013r 1               .segment	"BSS"
000000r 1               
000000r 1               _c:
000000r 1  00 00        	.res	2,$00
000002r 1               
000002r 1               ; ---------------------------------------------------------------
000002r 1               ; void __near__ SETPIXEL (int x, int y, unsigned char b)
000002r 1               ; ---------------------------------------------------------------
000002r 1               
000002r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_SETPIXEL: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     pusha
000003r 1  A0 04        	ldy     #$04
000005r 1  20 rr rr     	jsr     ldaxysp
000008r 1  8D rr rr     	sta     _x1cord
00000Br 1  8E rr rr     	stx     _x1cord+1
00000Er 1  A0 02        	ldy     #$02
000010r 1  20 rr rr     	jsr     ldaxysp
000013r 1  8D rr rr     	sta     _y1cord
000016r 1  8E rr rr     	stx     _y1cord+1
000019r 1  A0 00        	ldy     #$00
00001Br 1  B1 rr        	lda     (sp),y
00001Dr 1  D0 03 4C rr  	jeq     L0002
000021r 1  rr           
000022r 1  20 rr rr     	jsr     _SetPixel
000025r 1  4C rr rr     	jmp     L0003
000028r 1  20 rr rr     L0002:	jsr     _ClearPixel
00002Br 1  20 rr rr     L0003:	jsr     incsp5
00002Er 1  60           	rts
00002Fr 1               
00002Fr 1               .endproc
00002Fr 1               
00002Fr 1               ; ---------------------------------------------------------------
00002Fr 1               ; void __near__ DRAWPIXEL (int x, int y)
00002Fr 1               ; ---------------------------------------------------------------
00002Fr 1               
00002Fr 1               .segment	"CODE"
00002Fr 1               
00002Fr 1               .proc	_DRAWPIXEL: near
00002Fr 1               
00002Fr 1               .segment	"CODE"
00002Fr 1               
00002Fr 1  20 rr rr     	jsr     pushax
000032r 1  A0 03        	ldy     #$03
000034r 1  20 rr rr     	jsr     ldaxysp
000037r 1  8D rr rr     	sta     _x1cord
00003Ar 1  8E rr rr     	stx     _x1cord+1
00003Dr 1  A0 01        	ldy     #$01
00003Fr 1  20 rr rr     	jsr     ldaxysp
000042r 1  8D rr rr     	sta     _y1cord
000045r 1  8E rr rr     	stx     _y1cord+1
000048r 1  20 rr rr     	jsr     _SetPixel
00004Br 1  20 rr rr     	jsr     incsp4
00004Er 1  60           	rts
00004Fr 1               
00004Fr 1               .endproc
00004Fr 1               
00004Fr 1               ; ---------------------------------------------------------------
00004Fr 1               ; void __near__ DrawText (char *psz)
00004Fr 1               ; ---------------------------------------------------------------
00004Fr 1               
00004Fr 1               .segment	"CODE"
00004Fr 1               
00004Fr 1               .proc	_DrawText: near
00004Fr 1               
00004Fr 1               .segment	"CODE"
00004Fr 1               
00004Fr 1  20 rr rr     	jsr     pushax
000052r 1  4C rr rr     	jmp     L000F
000055r 1  4C rr rr     L0002:	jmp     L0007
000058r 1  AD rr rr     L0005:	lda     _cursorX
00005Br 1  38           	sec
00005Cr 1  E9 28        	sbc     #$28
00005Er 1  8D rr rr     	sta     _cursorX
000061r 1  B0 03        	bcs     L0009
000063r 1  CE rr rr     	dec     _cursorX+1
000066r 1  AE rr rr     L0009:	ldx     _cursorX+1
000069r 1  EE rr rr     	inc     _cursorY
00006Cr 1  D0 03        	bne     L000A
00006Er 1  EE rr rr     	inc     _cursorY+1
000071r 1  AD rr rr     L000A:	lda     _cursorY
000074r 1  AE rr rr     	ldx     _cursorY+1
000077r 1  AD rr rr     L0007:	lda     _cursorX
00007Ar 1  AE rr rr     	ldx     _cursorX+1
00007Dr 1  C9 28        	cmp     #$28
00007Fr 1  8A           	txa
000080r 1  E9 00        	sbc     #$00
000082r 1  70 02        	bvs     L0008
000084r 1  49 80        	eor     #$80
000086r 1  0A           L0008:	asl     a
000087r 1  A9 00        	lda     #$00
000089r 1  A2 00        	ldx     #$00
00008Br 1  2A           	rol     a
00008Cr 1  D0 CA        	jne     L0005
00008Er 1  AD rr rr     	lda     _cursorY
000091r 1  AE rr rr     	ldx     _cursorY+1
000094r 1  C9 19        	cmp     #$19
000096r 1  8A           	txa
000097r 1  E9 00        	sbc     #$00
000099r 1  70 02        	bvs     L000C
00009Br 1  49 80        	eor     #$80
00009Dr 1  0A           L000C:	asl     a
00009Er 1  A9 00        	lda     #$00
0000A0r 1  A2 00        	ldx     #$00
0000A2r 1  2A           	rol     a
0000A3r 1  D0 03 4C rr  	jeq     L000B
0000A7r 1  rr           
0000A8r 1  A2 00        	ldx     #$00
0000AAr 1  A9 18        	lda     #$18
0000ACr 1  8D rr rr     	sta     _cursorY
0000AFr 1  8E rr rr     	stx     _cursorY+1
0000B2r 1  20 rr rr     	jsr     _ScrollScreen
0000B5r 1  A0 01        L000B:	ldy     #$01
0000B7r 1  20 rr rr     	jsr     ldaxysp
0000BAr 1  A0 00        	ldy     #$00
0000BCr 1  20 rr rr     	jsr     ldauidx
0000BFr 1  C9 0A        	cmp     #$0A
0000C1r 1  20 rr rr     	jsr     booleq
0000C4r 1  D0 03 4C rr  	jeq     L000D
0000C8r 1  rr           
0000C9r 1  A2 00        	ldx     #$00
0000CBr 1  A9 00        	lda     #$00
0000CDr 1  8D rr rr     	sta     _cursorX
0000D0r 1  8E rr rr     	stx     _cursorX+1
0000D3r 1  EE rr rr     	inc     _cursorY
0000D6r 1  D0 03        	bne     L000E
0000D8r 1  EE rr rr     	inc     _cursorY+1
0000DBr 1  A0 00        L000E:	ldy     #$00
0000DDr 1  A2 00        	ldx     #$00
0000DFr 1  A9 01        	lda     #$01
0000E1r 1  20 rr rr     	jsr     addeqysp
0000E4r 1  4C rr rr     	jmp     L000F
0000E7r 1  A0 01        L000D:	ldy     #$01
0000E9r 1  20 rr rr     	jsr     ldaxysp
0000ECr 1  A0 00        	ldy     #$00
0000EEr 1  20 rr rr     	jsr     ldauidx
0000F1r 1  8D rr rr     	sta     _c
0000F4r 1  8E rr rr     	stx     _c+1
0000F7r 1  AE rr rr     	ldx     _cursorX
0000FAr 1  AC rr rr     	ldy     _cursorY
0000FDr 1  AD rr rr     	lda     _c
000100r 1  20 rr rr     	jsr     _DrawChar
000103r 1  EE rr rr     	inc     _cursorX
000106r 1  D0 03        	bne     L0010
000108r 1  EE rr rr     	inc     _cursorX+1
00010Br 1  A0 00        L0010:	ldy     #$00
00010Dr 1  A2 00        	ldx     #$00
00010Fr 1  A9 01        	lda     #$01
000111r 1  20 rr rr     	jsr     addeqysp
000114r 1  A0 01        L000F:	ldy     #$01
000116r 1  20 rr rr     	jsr     ldaxysp
000119r 1  A0 00        	ldy     #$00
00011Br 1  20 rr rr     	jsr     ldauidx
00011Er 1  F0 03 4C rr  	jne     L0002
000122r 1  rr           
000123r 1  20 rr rr     	jsr     incsp2
000126r 1  60           	rts
000127r 1               
000127r 1               .endproc
000127r 1               
000127r 1               ; ---------------------------------------------------------------
000127r 1               ; void __near__ DrawTextAt (int x, int y, char *psz)
000127r 1               ; ---------------------------------------------------------------
000127r 1               
000127r 1               .segment	"CODE"
000127r 1               
000127r 1               .proc	_DrawTextAt: near
000127r 1               
000127r 1               .segment	"CODE"
000127r 1               
000127r 1  20 rr rr     	jsr     pushax
00012Ar 1  A0 05        	ldy     #$05
00012Cr 1  20 rr rr     	jsr     ldaxysp
00012Fr 1  8D rr rr     	sta     _cursorX
000132r 1  8E rr rr     	stx     _cursorX+1
000135r 1  A0 03        	ldy     #$03
000137r 1  20 rr rr     	jsr     ldaxysp
00013Ar 1  8D rr rr     	sta     _cursorY
00013Dr 1  8E rr rr     	stx     _cursorY+1
000140r 1  A0 01        	ldy     #$01
000142r 1  20 rr rr     	jsr     ldaxysp
000145r 1  20 rr rr     	jsr     _DrawText
000148r 1  20 rr rr     	jsr     incsp6
00014Br 1  60           	rts
00014Cr 1               
00014Cr 1               .endproc
00014Cr 1               
00014Cr 1               ; ---------------------------------------------------------------
00014Cr 1               ; void __near__ DrawLine (int x0, int y0, int x1, int y1, unsigned char val)
00014Cr 1               ; ---------------------------------------------------------------
00014Cr 1               
00014Cr 1               .segment	"CODE"
00014Cr 1               
00014Cr 1               .proc	_DrawLine: near
00014Cr 1               
00014Cr 1               .segment	"CODE"
00014Cr 1               
00014Cr 1  20 rr rr     	jsr     pusha
00014Fr 1  A0 04        	ldy     #$04
000151r 1  20 rr rr     	jsr     ldaxysp
000154r 1  20 rr rr     	jsr     pushax
000157r 1  A0 0A        	ldy     #$0A
000159r 1  20 rr rr     	jsr     ldaxysp
00015Cr 1  20 rr rr     	jsr     tossubax
00015Fr 1  20 rr rr     	jsr     _abs
000162r 1  20 rr rr     	jsr     pushax
000165r 1  A0 0A        	ldy     #$0A
000167r 1  20 rr rr     	jsr     ldaxysp
00016Ar 1  20 rr rr     	jsr     pushax
00016Dr 1  A0 08        	ldy     #$08
00016Fr 1  20 rr rr     	jsr     ldaxysp
000172r 1  20 rr rr     	jsr     tosltax
000175r 1  D0 03 4C rr  	jeq     L0002
000179r 1  rr           
00017Ar 1  A2 00        	ldx     #$00
00017Cr 1  A9 01        	lda     #$01
00017Er 1  4C rr rr     	jmp     L0003
000181r 1  A2 FF        L0002:	ldx     #$FF
000183r 1  A9 FF        	lda     #$FF
000185r 1  20 rr rr     L0003:	jsr     pushax
000188r 1  A0 06        	ldy     #$06
00018Ar 1  20 rr rr     	jsr     ldaxysp
00018Dr 1  20 rr rr     	jsr     pushax
000190r 1  A0 0C        	ldy     #$0C
000192r 1  20 rr rr     	jsr     ldaxysp
000195r 1  20 rr rr     	jsr     tossubax
000198r 1  20 rr rr     	jsr     _abs
00019Br 1  20 rr rr     	jsr     pushax
00019Er 1  A0 0C        	ldy     #$0C
0001A0r 1  20 rr rr     	jsr     ldaxysp
0001A3r 1  20 rr rr     	jsr     pushax
0001A6r 1  A0 0A        	ldy     #$0A
0001A8r 1  20 rr rr     	jsr     ldaxysp
0001ABr 1  20 rr rr     	jsr     tosltax
0001AEr 1  D0 03 4C rr  	jeq     L0004
0001B2r 1  rr           
0001B3r 1  A2 00        	ldx     #$00
0001B5r 1  A9 01        	lda     #$01
0001B7r 1  4C rr rr     	jmp     L0005
0001BAr 1  A2 FF        L0004:	ldx     #$FF
0001BCr 1  A9 FF        	lda     #$FF
0001BEr 1  20 rr rr     L0005:	jsr     pushax
0001C1r 1  A0 07        	ldy     #$07
0001C3r 1  20 rr rr     	jsr     ldaxysp
0001C6r 1  20 rr rr     	jsr     pushax
0001C9r 1  A0 05        	ldy     #$05
0001CBr 1  20 rr rr     	jsr     ldaxysp
0001CEr 1  20 rr rr     	jsr     tosgtax
0001D1r 1  D0 03 4C rr  	jeq     L0006
0001D5r 1  rr           
0001D6r 1  A0 07        	ldy     #$07
0001D8r 1  20 rr rr     	jsr     ldaxysp
0001DBr 1  4C rr rr     	jmp     L0007
0001DEr 1  A0 03        L0006:	ldy     #$03
0001E0r 1  20 rr rr     	jsr     ldaxysp
0001E3r 1  20 rr rr     	jsr     negax
0001E6r 1  20 rr rr     L0007:	jsr     pushax
0001E9r 1  A2 00        	ldx     #$00
0001EBr 1  A9 02        	lda     #$02
0001EDr 1  20 rr rr     	jsr     tosdivax
0001F0r 1  20 rr rr     	jsr     pushax
0001F3r 1  20 rr rr     	jsr     decsp2
0001F6r 1  4C rr rr     	jmp     L0010
0001F9r 1  A0 14        L0008:	ldy     #$14
0001FBr 1  20 rr rr     	jsr     ldaxysp
0001FEr 1  20 rr rr     	jsr     pushax
000201r 1  A0 14        	ldy     #$14
000203r 1  20 rr rr     	jsr     ldaxysp
000206r 1  20 rr rr     	jsr     pushax
000209r 1  A0 10        	ldy     #$10
00020Br 1  A2 00        	ldx     #$00
00020Dr 1  B1 rr        	lda     (sp),y
00020Fr 1  20 rr rr     	jsr     _SETPIXEL
000212r 1  A0 14        	ldy     #$14
000214r 1  20 rr rr     	jsr     ldaxysp
000217r 1  20 rr rr     	jsr     pushax
00021Ar 1  A0 12        	ldy     #$12
00021Cr 1  20 rr rr     	jsr     ldaxysp
00021Fr 1  20 rr rr     	jsr     toseqax
000222r 1  D0 03 4C rr  	jeq     L000C
000226r 1  rr           
000227r 1  A0 12        	ldy     #$12
000229r 1  20 rr rr     	jsr     ldaxysp
00022Cr 1  20 rr rr     	jsr     pushax
00022Fr 1  A0 10        	ldy     #$10
000231r 1  20 rr rr     	jsr     ldaxysp
000234r 1  20 rr rr     	jsr     toseqax
000237r 1  F0 03 4C rr  	jne     L000D
00023Br 1  rr           
00023Cr 1  A2 00        L000C:	ldx     #$00
00023Er 1  A9 00        	lda     #$00
000240r 1  D0 03 4C rr  	jeq     L000E
000244r 1  rr           
000245r 1  A2 00        L000D:	ldx     #$00
000247r 1  A9 01        	lda     #$01
000249r 1  D0 03 4C rr  L000E:	jeq     L000B
00024Dr 1  rr           
00024Er 1  4C rr rr     	jmp     L0009
000251r 1  A0 03        L000B:	ldy     #$03
000253r 1  20 rr rr     	jsr     ldaxysp
000256r 1  A0 00        	ldy     #$00
000258r 1  20 rr rr     	jsr     staxysp
00025Br 1  A0 01        	ldy     #$01
00025Dr 1  20 rr rr     	jsr     ldaxysp
000260r 1  20 rr rr     	jsr     pushax
000263r 1  A0 0D        	ldy     #$0D
000265r 1  20 rr rr     	jsr     ldaxysp
000268r 1  20 rr rr     	jsr     negax
00026Br 1  20 rr rr     	jsr     tosgtax
00026Er 1  D0 03 4C rr  	jeq     L000F
000272r 1  rr           
000273r 1  A0 07        	ldy     #$07
000275r 1  20 rr rr     	jsr     ldaxysp
000278r 1  A0 02        	ldy     #$02
00027Ar 1  20 rr rr     	jsr     subeqysp
00027Dr 1  A0 09        	ldy     #$09
00027Fr 1  20 rr rr     	jsr     ldaxysp
000282r 1  A0 13        	ldy     #$13
000284r 1  20 rr rr     	jsr     addeqysp
000287r 1  A0 01        L000F:	ldy     #$01
000289r 1  20 rr rr     	jsr     ldaxysp
00028Cr 1  20 rr rr     	jsr     pushax
00028Fr 1  A0 09        	ldy     #$09
000291r 1  20 rr rr     	jsr     ldaxysp
000294r 1  20 rr rr     	jsr     tosltax
000297r 1  D0 03 4C rr  	jeq     L0010
00029Br 1  rr           
00029Cr 1  A0 0B        	ldy     #$0B
00029Er 1  20 rr rr     	jsr     ldaxysp
0002A1r 1  A0 02        	ldy     #$02
0002A3r 1  20 rr rr     	jsr     addeqysp
0002A6r 1  A0 05        	ldy     #$05
0002A8r 1  20 rr rr     	jsr     ldaxysp
0002ABr 1  A0 11        	ldy     #$11
0002ADr 1  20 rr rr     	jsr     addeqysp
0002B0r 1  4C rr rr     L0010:	jmp     L0008
0002B3r 1  A0 15        L0009:	ldy     #$15
0002B5r 1  20 rr rr     	jsr     addysp
0002B8r 1  60           	rts
0002B9r 1               
0002B9r 1               .endproc
0002B9r 1               
0002B9r 1               ; ---------------------------------------------------------------
0002B9r 1               ; void __near__ DrawCircleC (int x0, int y0, int radius, unsigned char)
0002B9r 1               ; ---------------------------------------------------------------
0002B9r 1               
0002B9r 1               .segment	"CODE"
0002B9r 1               
0002B9r 1               .proc	_DrawCircleC: near
0002B9r 1               
0002B9r 1               .segment	"CODE"
0002B9r 1               
0002B9r 1  20 rr rr     	jsr     pusha
0002BCr 1  A0 06        	ldy     #$06
0002BEr 1  20 rr rr     	jsr     ldaxysp
0002C1r 1  8D rr rr     	sta     _x1cord
0002C4r 1  8E rr rr     	stx     _x1cord+1
0002C7r 1  A0 04        	ldy     #$04
0002C9r 1  20 rr rr     	jsr     ldaxysp
0002CCr 1  8D rr rr     	sta     _y1cord
0002CFr 1  8E rr rr     	stx     _y1cord+1
0002D2r 1  A0 02        	ldy     #$02
0002D4r 1  20 rr rr     	jsr     ldaxysp
0002D7r 1  8D rr rr     	sta     _y2cord
0002DAr 1  8E rr rr     	stx     _y2cord+1
0002DDr 1  20 rr rr     	jsr     _DrawCircle
0002E0r 1  20 rr rr     	jsr     incsp7
0002E3r 1  60           	rts
0002E4r 1               
0002E4r 1               .endproc
0002E4r 1               
0002E4r 1               ; ---------------------------------------------------------------
0002E4r 1               ; void __near__ MirrorFont (void)
0002E4r 1               ; ---------------------------------------------------------------
0002E4r 1               
0002E4r 1               .segment	"CODE"
0002E4r 1               
0002E4r 1               .proc	_MirrorFont: near
0002E4r 1               
0002E4r 1               .segment	"CODE"
0002E4r 1               
0002E4r 1  20 rr rr     	jsr     decsp2
0002E7r 1  A9 rr        	lda     #<(_font8x8_basic)
0002E9r 1  A2 rr        	ldx     #>(_font8x8_basic)
0002EBr 1  20 rr rr     	jsr     pushax
0002EEr 1  A2 00        	ldx     #$00
0002F0r 1  A9 00        	lda     #$00
0002F2r 1  A0 02        	ldy     #$02
0002F4r 1  20 rr rr     	jsr     staxysp
0002F7r 1  A0 03        L0002:	ldy     #$03
0002F9r 1  20 rr rr     	jsr     ldaxysp
0002FCr 1  C9 00        	cmp     #$00
0002FEr 1  8A           	txa
0002FFr 1  E9 04        	sbc     #$04
000301r 1  50 02        	bvc     L0006
000303r 1  49 80        	eor     #$80
000305r 1  0A           L0006:	asl     a
000306r 1  A9 00        	lda     #$00
000308r 1  A2 00        	ldx     #$00
00030Ar 1  2A           	rol     a
00030Br 1  F0 03 4C rr  	jne     L0005
00030Fr 1  rr           
000310r 1  4C rr rr     	jmp     L0003
000313r 1  A0 01        L0005:	ldy     #$01
000315r 1  20 rr rr     	jsr     ldaxysp
000318r 1  20 rr rr     	jsr     pushax
00031Br 1  A0 05        	ldy     #$05
00031Dr 1  20 rr rr     	jsr     ldaxysp
000320r 1  20 rr rr     	jsr     tosaddax
000323r 1  20 rr rr     	jsr     pushax
000326r 1  A0 03        	ldy     #$03
000328r 1  20 rr rr     	jsr     ldaxysp
00032Br 1  20 rr rr     	jsr     pushax
00032Er 1  A0 07        	ldy     #$07
000330r 1  20 rr rr     	jsr     ldaxysp
000333r 1  20 rr rr     	jsr     tosaddax
000336r 1  A0 00        	ldy     #$00
000338r 1  20 rr rr     	jsr     ldauidx
00033Br 1  20 rr rr     	jsr     _ReverseBits
00033Er 1  A0 00        	ldy     #$00
000340r 1  20 rr rr     	jsr     staspidx
000343r 1  A0 02        	ldy     #$02
000345r 1  A2 00        	ldx     #$00
000347r 1  A9 01        	lda     #$01
000349r 1  20 rr rr     	jsr     addeqysp
00034Cr 1  4C rr rr     	jmp     L0002
00034Fr 1  20 rr rr     L0003:	jsr     incsp4
000352r 1  60           	rts
000353r 1               
000353r 1               .endproc
000353r 1               
000353r 1               ; ---------------------------------------------------------------
000353r 1               ; void __near__ DrawScreenMoire (int left, int top, int right, int bottom)
000353r 1               ; ---------------------------------------------------------------
000353r 1               
000353r 1               .segment	"CODE"
000353r 1               
000353r 1               .proc	_DrawScreenMoire: near
000353r 1               
000353r 1               .segment	"CODE"
000353r 1               
000353r 1  20 rr rr     	jsr     pushax
000356r 1  20 rr rr     	jsr     decsp4
000359r 1  A0 0B        	ldy     #$0B
00035Br 1  20 rr rr     	jsr     ldaxysp
00035Er 1  20 rr rr     	jsr     pushax
000361r 1  A0 0B        	ldy     #$0B
000363r 1  20 rr rr     	jsr     ldaxysp
000366r 1  20 rr rr     	jsr     pushax
000369r 1  A0 0B        	ldy     #$0B
00036Br 1  20 rr rr     	jsr     ldaxysp
00036Er 1  20 rr rr     	jsr     pushax
000371r 1  A0 0F        	ldy     #$0F
000373r 1  20 rr rr     	jsr     ldaxysp
000376r 1  20 rr rr     	jsr     pushax
000379r 1  A2 00        	ldx     #$00
00037Br 1  A9 01        	lda     #$01
00037Dr 1  20 rr rr     	jsr     _DrawLine
000380r 1  A0 0B        	ldy     #$0B
000382r 1  20 rr rr     	jsr     ldaxysp
000385r 1  20 rr rr     	jsr     pushax
000388r 1  A0 07        	ldy     #$07
00038Ar 1  20 rr rr     	jsr     ldaxysp
00038Dr 1  20 rr rr     	jsr     pushax
000390r 1  A0 0B        	ldy     #$0B
000392r 1  20 rr rr     	jsr     ldaxysp
000395r 1  20 rr rr     	jsr     pushax
000398r 1  A0 0B        	ldy     #$0B
00039Ar 1  20 rr rr     	jsr     ldaxysp
00039Dr 1  20 rr rr     	jsr     pushax
0003A0r 1  A2 00        	ldx     #$00
0003A2r 1  A9 01        	lda     #$01
0003A4r 1  20 rr rr     	jsr     _DrawLine
0003A7r 1  A0 0B        	ldy     #$0B
0003A9r 1  20 rr rr     	jsr     ldaxysp
0003ACr 1  20 rr rr     	jsr     pushax
0003AFr 1  A0 0B        	ldy     #$0B
0003B1r 1  20 rr rr     	jsr     ldaxysp
0003B4r 1  20 rr rr     	jsr     pushax
0003B7r 1  A0 0F        	ldy     #$0F
0003B9r 1  20 rr rr     	jsr     ldaxysp
0003BCr 1  20 rr rr     	jsr     pushax
0003BFr 1  A0 0B        	ldy     #$0B
0003C1r 1  20 rr rr     	jsr     ldaxysp
0003C4r 1  20 rr rr     	jsr     pushax
0003C7r 1  A2 00        	ldx     #$00
0003C9r 1  A9 01        	lda     #$01
0003CBr 1  20 rr rr     	jsr     _DrawLine
0003CEr 1  A0 07        	ldy     #$07
0003D0r 1  20 rr rr     	jsr     ldaxysp
0003D3r 1  20 rr rr     	jsr     pushax
0003D6r 1  A0 0B        	ldy     #$0B
0003D8r 1  20 rr rr     	jsr     ldaxysp
0003DBr 1  20 rr rr     	jsr     pushax
0003DEr 1  A0 0B        	ldy     #$0B
0003E0r 1  20 rr rr     	jsr     ldaxysp
0003E3r 1  20 rr rr     	jsr     pushax
0003E6r 1  A0 0B        	ldy     #$0B
0003E8r 1  20 rr rr     	jsr     ldaxysp
0003EBr 1  20 rr rr     	jsr     pushax
0003EEr 1  A2 00        	ldx     #$00
0003F0r 1  A9 01        	lda     #$01
0003F2r 1  20 rr rr     	jsr     _DrawLine
0003F5r 1  A0 0B        	ldy     #$0B
0003F7r 1  20 rr rr     	jsr     ldaxysp
0003FAr 1  A0 02        	ldy     #$02
0003FCr 1  20 rr rr     	jsr     staxysp
0003FFr 1  A0 03        L0002:	ldy     #$03
000401r 1  20 rr rr     	jsr     ldaxysp
000404r 1  20 rr rr     	jsr     pushax
000407r 1  A0 09        	ldy     #$09
000409r 1  20 rr rr     	jsr     ldaxysp
00040Cr 1  20 rr rr     	jsr     tosltax
00040Fr 1  F0 03 4C rr  	jne     L0005
000413r 1  rr           
000414r 1  4C rr rr     	jmp     L0003
000417r 1  A0 03        L0005:	ldy     #$03
000419r 1  20 rr rr     	jsr     ldaxysp
00041Cr 1  20 rr rr     	jsr     pushax
00041Fr 1  A0 0B        	ldy     #$0B
000421r 1  20 rr rr     	jsr     ldaxysp
000424r 1  20 rr rr     	jsr     pushax
000427r 1  A0 0B        	ldy     #$0B
000429r 1  20 rr rr     	jsr     ldaxysp
00042Cr 1  20 rr rr     	jsr     pushax
00042Fr 1  A0 09        	ldy     #$09
000431r 1  20 rr rr     	jsr     ldaxysp
000434r 1  20 rr rr     	jsr     tossubax
000437r 1  20 rr rr     	jsr     pushax
00043Ar 1  A0 11        	ldy     #$11
00043Cr 1  20 rr rr     	jsr     ldaxysp
00043Fr 1  20 rr rr     	jsr     tosaddax
000442r 1  20 rr rr     	jsr     pushax
000445r 1  A0 0B        	ldy     #$0B
000447r 1  20 rr rr     	jsr     ldaxysp
00044Ar 1  20 rr rr     	jsr     pushax
00044Dr 1  A2 00        	ldx     #$00
00044Fr 1  A9 01        	lda     #$01
000451r 1  20 rr rr     	jsr     _DrawLine
000454r 1  A0 02        	ldy     #$02
000456r 1  A2 00        	ldx     #$00
000458r 1  A9 06        	lda     #$06
00045Ar 1  20 rr rr     	jsr     addeqysp
00045Dr 1  4C rr rr     	jmp     L0002
000460r 1  A0 09        L0003:	ldy     #$09
000462r 1  20 rr rr     	jsr     ldaxysp
000465r 1  A0 00        	ldy     #$00
000467r 1  20 rr rr     	jsr     staxysp
00046Ar 1  A0 01        L0006:	ldy     #$01
00046Cr 1  20 rr rr     	jsr     ldaxysp
00046Fr 1  20 rr rr     	jsr     pushax
000472r 1  A0 07        	ldy     #$07
000474r 1  20 rr rr     	jsr     ldaxysp
000477r 1  20 rr rr     	jsr     tosltax
00047Ar 1  F0 03 4C rr  	jne     L0009
00047Er 1  rr           
00047Fr 1  4C rr rr     	jmp     L0007
000482r 1  A0 0B        L0009:	ldy     #$0B
000484r 1  20 rr rr     	jsr     ldaxysp
000487r 1  20 rr rr     	jsr     pushax
00048Ar 1  A0 03        	ldy     #$03
00048Cr 1  20 rr rr     	jsr     ldaxysp
00048Fr 1  20 rr rr     	jsr     pushax
000492r 1  A0 0B        	ldy     #$0B
000494r 1  20 rr rr     	jsr     ldaxysp
000497r 1  20 rr rr     	jsr     pushax
00049Ar 1  A0 0B        	ldy     #$0B
00049Cr 1  20 rr rr     	jsr     ldaxysp
00049Fr 1  20 rr rr     	jsr     pushax
0004A2r 1  A0 09        	ldy     #$09
0004A4r 1  20 rr rr     	jsr     ldaxysp
0004A7r 1  20 rr rr     	jsr     tossubax
0004AAr 1  20 rr rr     	jsr     pushax
0004ADr 1  A0 11        	ldy     #$11
0004AFr 1  20 rr rr     	jsr     ldaxysp
0004B2r 1  20 rr rr     	jsr     tosaddax
0004B5r 1  20 rr rr     	jsr     pushax
0004B8r 1  A2 00        	ldx     #$00
0004BAr 1  A9 01        	lda     #$01
0004BCr 1  20 rr rr     	jsr     _DrawLine
0004BFr 1  A0 00        	ldy     #$00
0004C1r 1  A2 00        	ldx     #$00
0004C3r 1  A9 06        	lda     #$06
0004C5r 1  20 rr rr     	jsr     addeqysp
0004C8r 1  4C rr rr     	jmp     L0006
0004CBr 1  A0 0C        L0007:	ldy     #$0C
0004CDr 1  20 rr rr     	jsr     addysp
0004D0r 1  60           	rts
0004D1r 1               
0004D1r 1               .endproc
0004D1r 1               
0004D1r 1               ; ---------------------------------------------------------------
0004D1r 1               ; int __near__ main (void)
0004D1r 1               ; ---------------------------------------------------------------
0004D1r 1               
0004D1r 1               .segment	"CODE"
0004D1r 1               
0004D1r 1               .proc	_main: near
0004D1r 1               
0004D1r 1               .segment	"CODE"
0004D1r 1               
0004D1r 1  20 rr rr     	jsr     decsp2
0004D4r 1  20 rr rr     	jsr     _ClearScreen
0004D7r 1  20 rr rr     	jsr     _Demo
0004DAr 1  A2 00        	ldx     #$00
0004DCr 1  A9 05        	lda     #$05
0004DEr 1  A0 00        	ldy     #$00
0004E0r 1  20 rr rr     	jsr     staxysp
0004E3r 1  A0 01        L0002:	ldy     #$01
0004E5r 1  20 rr rr     	jsr     ldaxysp
0004E8r 1  C9 50        	cmp     #$50
0004EAr 1  8A           	txa
0004EBr 1  E9 00        	sbc     #$00
0004EDr 1  50 02        	bvc     L0006
0004EFr 1  49 80        	eor     #$80
0004F1r 1  0A           L0006:	asl     a
0004F2r 1  A9 00        	lda     #$00
0004F4r 1  A2 00        	ldx     #$00
0004F6r 1  2A           	rol     a
0004F7r 1  F0 03 4C rr  	jne     L0005
0004FBr 1  rr           
0004FCr 1  4C rr rr     	jmp     L0003
0004FFr 1  A2 00        L0005:	ldx     #$00
000501r 1  A9 A0        	lda     #$A0
000503r 1  20 rr rr     	jsr     pushax
000506r 1  A2 00        	ldx     #$00
000508r 1  A9 78        	lda     #$78
00050Ar 1  20 rr rr     	jsr     pushax
00050Dr 1  A0 05        	ldy     #$05
00050Fr 1  20 rr rr     	jsr     ldaxysp
000512r 1  20 rr rr     	jsr     pushax
000515r 1  A2 00        	ldx     #$00
000517r 1  A9 01        	lda     #$01
000519r 1  20 rr rr     	jsr     _DrawCircleC
00051Cr 1  A0 00        	ldy     #$00
00051Er 1  A2 00        	ldx     #$00
000520r 1  A9 05        	lda     #$05
000522r 1  20 rr rr     	jsr     addeqysp
000525r 1  4C rr rr     	jmp     L0002
000528r 1  A9 rr        L0003:	lda     #<(S0004)
00052Ar 1  A2 rr        	ldx     #>(S0004)
00052Cr 1  20 rr rr     	jsr     pushax
00052Fr 1  A0 02        	ldy     #$02
000531r 1  20 rr rr     	jsr     _printf
000534r 1  A2 00        	ldx     #$00
000536r 1  A9 00        	lda     #$00
000538r 1  4C rr rr     	jmp     L0001
00053Br 1  20 rr rr     L0001:	jsr     incsp2
00053Er 1  60           	rts
00053Fr 1               
00053Fr 1               .endproc
00053Fr 1               
00053Fr 1               
