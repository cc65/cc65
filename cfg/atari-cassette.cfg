FEATURES {
    STARTADDRESS: default = $0900;
}
SYMBOLS {
    __STACKSIZE__:       type = weak,   value = $0800; # 2k stack
    __RESERVED_MEMORY__: type = weak,   value = $0000;
    __STARTADDRESS__:    type = export, value = %S;
    _cas_hdr:            type = import;
}
MEMORY {
    ZP:   file = "", define = yes, start = $0082, size = $007E;
    MAIN: file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;
}
SEGMENTS {
    ZEROPAGE: load = ZP,   type = zp,                optional = yes;
    EXTZP:    load = ZP,   type = zp,                optional = yes;
    CASHDR:   load = MAIN, type = ro;
    STARTUP:  load = MAIN, type = ro,  define = yes, optional = yes;
    LOWBSS:   load = MAIN, type = rw,                optional = yes;  # not zero initialized
    LOWCODE:  load = MAIN, type = ro,  define = yes, optional = yes;
    ONCE:     load = MAIN, type = ro,                optional = yes;
    CODE:     load = MAIN, type = ro,  define = yes;
    RODATA:   load = MAIN, type = ro,                optional = yes;
    DATA:     load = MAIN, type = rw,                optional = yes;
    BSS:      load = MAIN, type = bss, define = yes, optional = yes;
    INIT:     load = MAIN, type = bss,               optional = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
