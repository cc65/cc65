<!doctype linuxdoc system>

<article>

<title>PC-Engine (TurboGrafx) System specific information for cc65
<author>
<url url="mailto:groepaz@gmx.net" name="Groepaz/Hitmen">
<date>2016-09-29

<abstract>
An overview over the PCE runtime system as it is implemented for the
cc65 C compiler.
</abstract>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->

<sect>Overview<p>

This file contains an overview of the PCE runtime system as it comes
with the cc65 C compiler. It describes the memory layout, PCE specific header
files, available drivers, and any pitfalls specific to that platform.

Please note that PCE specific functions are just mentioned here, they are
described in detail in the separate <url url="funcref.html" name="function
reference">. Even functions marked as "platform dependent" may be available on
more than one platform. Please see the function reference for more
information.


<sect>Binary format<p>

The standard binary output format generated by the linker for the PCE target
is a cartridge image with no header. It is of course possible to change this
behaviour by using a modified startup file and linker config.

<sect>Memory layout<p>

cc65 generated programs with the default setup run with the I/O area and a
CHR bank enabled, which gives a usable memory range of &dollar;8000 - &dollar;FFF3.
All boot ROM entry points may be called directly without additional code.

Special locations:

<descrip>
  <tag/Text screen and Font/
  The text screen is located at VRAM &dollar;0000,
  the Font is located at VRAM &dollar;2000.

  <tag/Stack/
  The C runtime stack is located in system RAM at &dollar;3FFF and growing downwards.

  <tag/BSS and Data/

  The BSS (uninitialized variables) and Data (initialized variables) sections are
  placed one after the other into system RAM at &dollar;2000.

  <tag/Heap/
  The C heap is located after the end of the Data section and grows towards the C
  runtime stack.

  <tag/Code/
  The startup code is located at &dollar;E000 in the System/Hardware bank. Further
  code can be placed in other ROM banks, this must be done manually however.

</descrip><p>



<sect>Platform specific header files<p>

Programs containing PCE specific code may use the <tt/pce.h/ header file.


<sect1>PCE specific functions<p>

<itemize>
<item>waitvblank</item>
<item>get_tv (since all PCE systems are NTSC, this always returns TV_NTSC)</item>
</itemize>



<sect1>Hardware access<p>

The following pseudo variables declared in the <tt/pce.inc/ include file do
allow access to hardware located in the address space.

<descrip>

  <tag><tt/PSG/</tag>
  The <tt/PSG/ defines allow access to the PSG chip (Programmable Sound Generator).

  <tag><tt/VCE/</tag>
  The <tt/VCE/ defines allow access to the VCE chip (Video Color Encoder).

  <tag><tt/VDC/</tag>
  The <tt/VDC/ defines allow access to the VDC chip (Video Display Controller).

</descrip><p>



<sect>Loadable drivers<p>

All drivers must be statically linked because no file I/O is available.
The names in the parentheses denote the symbols to be used for static linking of the drivers.


<sect1>Graphics drivers<p>

No TGI graphics drivers are currently available for the PCE.


<sect1>Extended memory drivers<p>

No extended memory drivers are currently available for the PCE.


<sect1>Joystick drivers<p>

<descrip>

  <tag><tt/pce-stdjoy.joy (pce_stdjoy)/</tag>
  A joystick driver for the standard two buttons joypad is available.

  Note that the japanese 6-button pad is currently not supported.

</descrip><p>


<sect1>Mouse drivers<p>

No mouse drivers are currently available for the PCE.


<sect1>RS232 device drivers<p>

No serial drivers are currently available for the PCE.



<sect>Limitations<p>

<itemize>
<item>interruptor support in crt0 (and cfg) is missing
</itemize>

<sect1>Disk I/O<p>

The existing library for the PCE doesn't implement C file
I/O. There are no hacks for the <tt/read()/ and <tt/write()/ routines.

To be more concrete, this limitation means that you cannot use any of the
following functions (and a few others):

<itemize>
<item>printf
<item>fclose
<item>fopen
<item>fread
<item>fprintf
<item>fputc
<item>fscanf
<item>fwrite
<item>...
</itemize>

<sect>Other hints<p>

<itemize>
<item>a good emulator to use for PC-Engine is "mednafen" (<url url="http://mednafen.fobby.net/">)
</itemize>

some useful resources on PCE coding:

<itemize>
<item><url url="http://blog.blockos.org/?tag=pc-engine">
<item><url url="http://pcedev.blockos.org/viewforum.php?f=5">
<item><url url="http://www.romhacking.net/?page=documents&amp;platform=4">
<item><url url="http://archaicpixels.com/Main_Page">

<item><url url="http://www.magicengine.com/mkit/doc.html">

<item><url url="https://github.com/uli/huc">
<item><url url="http://www.zeograd.com/parse.php?src=hucf">
</itemize>

<sect>License<p>

This software is provided 'as-is', without any expressed or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

<enum>
<item>	The origin of this software must not be misrepresented; you must not
	claim that you wrote the original software. If you use this software
	in a product, an acknowledgment in the product documentation would be
	appreciated but is not required.
<item>	Altered source versions must be plainly marked as such, and must not
	be misrepresented as being the original software.
<item>	This notice may not be removed or altered from any source
	distribution.
</enum>

</article>



