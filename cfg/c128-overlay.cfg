SYMBOLS {
    __LOADADDR__:    type = import;
    __EXEHDR__:      type = import;
    __OVERLAYADDR__: type = import;
    __STACKSIZE__:   type = weak, value = $0800; # 2k stack
    __OVERLAYSIZE__: type = weak, value = $1000; # 4k overlay
}
MEMORY {
    ZP:       file = "", define = yes, start = $0002,                   size = $001A;
    LOADADDR: file = %O,               start = $1BFF,                   size = $0002;
    HEADER:   file = %O,               start = $1C01,                   size = $000C;
    MAIN:     file = %O, define = yes, start = $1C0D,                   size = $A3F3 - __OVERLAYSIZE__ - __STACKSIZE__;
    OVL1ADDR: file = "%O.1",           start = $BFFE - __OVERLAYSIZE__, size = $0002;
    OVL1:     file = "%O.1",           start = $C000 - __OVERLAYSIZE__, size = __OVERLAYSIZE__;
    OVL2ADDR: file = "%O.2",           start = $BFFE - __OVERLAYSIZE__, size = $0002;
    OVL2:     file = "%O.2",           start = $C000 - __OVERLAYSIZE__, size = __OVERLAYSIZE__;
    OVL3ADDR: file = "%O.3",           start = $BFFE - __OVERLAYSIZE__, size = $0002;
    OVL3:     file = "%O.3",           start = $C000 - __OVERLAYSIZE__, size = __OVERLAYSIZE__;
    OVL4ADDR: file = "%O.4",           start = $BFFE - __OVERLAYSIZE__, size = $0002;
    OVL4:     file = "%O.4",           start = $C000 - __OVERLAYSIZE__, size = __OVERLAYSIZE__;
    OVL5ADDR: file = "%O.5",           start = $BFFE - __OVERLAYSIZE__, size = $0002;
    OVL5:     file = "%O.5",           start = $C000 - __OVERLAYSIZE__, size = __OVERLAYSIZE__;
    OVL6ADDR: file = "%O.6",           start = $BFFE - __OVERLAYSIZE__, size = $0002;
    OVL6:     file = "%O.6",           start = $C000 - __OVERLAYSIZE__, size = __OVERLAYSIZE__;
    OVL7ADDR: file = "%O.7",           start = $BFFE - __OVERLAYSIZE__, size = $0002;
    OVL7:     file = "%O.7",           start = $C000 - __OVERLAYSIZE__, size = __OVERLAYSIZE__;
    OVL8ADDR: file = "%O.8",           start = $BFFE - __OVERLAYSIZE__, size = $0002;
    OVL8:     file = "%O.8",           start = $C000 - __OVERLAYSIZE__, size = __OVERLAYSIZE__;
    OVL9ADDR: file = "%O.9",           start = $BFFE - __OVERLAYSIZE__, size = $0002;
    OVL9:     file = "%O.9",           start = $C000 - __OVERLAYSIZE__, size = __OVERLAYSIZE__;
}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = MAIN,     type = ro;
    LOWCODE:  load = MAIN,     type = ro,                optional = yes;
    ONCE:     load = MAIN,     type = ro,                optional = yes;
    CODE:     load = MAIN,     type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = bss;
    BSS:      load = MAIN,     type = bss, define = yes;
    OVL1ADDR: load = OVL1ADDR, type = ro;
    OVERLAY1: load = OVL1,     type = ro,  define = yes, optional = yes;
    OVL2ADDR: load = OVL2ADDR, type = ro;
    OVERLAY2: load = OVL2,     type = ro,  define = yes, optional = yes;
    OVL3ADDR: load = OVL3ADDR, type = ro;
    OVERLAY3: load = OVL3,     type = ro,  define = yes, optional = yes;
    OVL4ADDR: load = OVL4ADDR, type = ro;
    OVERLAY4: load = OVL4,     type = ro,  define = yes, optional = yes;
    OVL5ADDR: load = OVL5ADDR, type = ro;
    OVERLAY5: load = OVL5,     type = ro,  define = yes, optional = yes;
    OVL6ADDR: load = OVL6ADDR, type = ro;
    OVERLAY6: load = OVL6,     type = ro,  define = yes, optional = yes;
    OVL7ADDR: load = OVL7ADDR, type = ro;
    OVERLAY7: load = OVL7,     type = ro,  define = yes, optional = yes;
    OVL8ADDR: load = OVL8ADDR, type = ro;
    OVERLAY8: load = OVL8,     type = ro,  define = yes, optional = yes;
    OVL9ADDR: load = OVL9ADDR, type = ro;
    OVERLAY9: load = OVL9,     type = ro,  define = yes, optional = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
