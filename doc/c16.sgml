<!doctype linuxdoc system>

<article>
<title>Commodore 16/116 specific information for cc65
<author><url url="mailto:uz@cc65.org" name="Ullrich von Bassewitz">

<abstract>
An overview over the C16 runtime system as it is implemented for the cc65 C
compiler.
</abstract>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->

<sect>Overview<p>

This file contains an overview of the C16 runtime system as it comes with the
cc65 C compiler. It describes the memory layout, C16/116 specific header
files, available drivers, and any pitfalls specific to that platform.

Please note that C16 specific functions are just mentioned here, they are
described in detail in the separate <url url="funcref.html" name="function
reference">. Even functions marked as "platform dependent" may be available on
more than one platform. Please see the function reference for more
information.

Since the C16/C116 and the Commodore Plus/4 are almost identical (the former
don't have the 6551 ACIA and only 16KB of memory), the <url
url="plus4.html" name="Plus/4 documentation"> is also worth a look. The
difference between both cc65 targets is that the Plus/4 runtime uses banking
to support full 64K RAM, while the C16 does not use banking and supports up to
32K RAM. Because banking is not needed, most C16 programs will be somewhat
smaller than the same program compiled for the Plus/4. However, programs C16
will always run on the Plus/4, while the reverse is not necessarily true.


<sect>Binary format<p>

The standard binary output format generated by the linker for the C16/116
target is a machine language program with a one line BASIC stub which, calls
the machine language part via SYS. This means that a program can be loaded as
BASIC program and started with RUN. It is of course possible to change this
behaviour by using a modified startup file and linker config.


<sect>Memory layout<p>

cc65 generated programs with the default setup run with the kernal and basic
banked in. This gives a usable memory range of &dollar;1000 - &dollar;4000
(or &dollar;8000 if the machine is equipped with 32K RAM or more). Having the
kernal and basic ROMs banked in means, that ROM entry points may be called
directly from user code.

Special locations:

<descrip>
  <tag/Text screen/
  The text screen is located at &dollar;C00 (as in the standard setup).

  <tag/Color RAM/
  The color RAM is located at &dollar;800 (standard location).

  <tag/Stack/
  The C runtime stack is located at &dollar;3FFF (&dollar;7FFF in case of a
  machine with 32K of memory or more) and growing downwards.

  <tag/Heap/
  The C heap is located at the end of the program and grows towards the C
  runtime stack.

</descrip><p>



<sect>Platform specific header files<p>

Programs containing C16 specific code may use the <tt/c16.h/ or <tt/cbm.h/
header files. Using the later may be an option when writing code for more than
one CBM platform, since it includes <tt/c16.h/ and declares several functions
common to all CBM platforms.

Please note that most of the header file declarations from the <tt/c16.h/
header file are shared between the C16 and Plus/4 configurations. For this
reason, most of it is located in a common header file named <tt/cbm264.h/.



<sect1>C16/C116 specific functions<p>

There are currently no special C16/C116 functions.


<sect1>CBM specific functions<p>

Some functions are available for all (or at least most) of the Commodore
machines. See the <url url="funcref.html" name="function reference"> for
declaration and usage.

<itemize>
<item>cbm_close
<item>cbm_closedir
<item>cbm_k_setlfs
<item>cbm_k_setnam
<item>cbm_k_load
<item>cbm_k_save
<item>cbm_k_open
<item>cbm_k_close
<item>cbm_k_readst
<item>cbm_k_chkin
<item>cbm_k_ckout
<item>cbm_k_basin
<item>cbm_k_bsout
<item>cbm_k_clrch
<item>cbm_k_tksa
<item>cbm_k_second
<item>cbm_load
<item>cbm_open
<item>cbm_opendir
<item>cbm_read
<item>cbm_readdir
<item>cbm_save
<item>cbm_write
<item>get_tv
</itemize>


<sect1>CBM specific CPU functions<p>

Some CPU related functions are available for some of the Commodore
machines. See the <url url="funcref.html" name="function reference"> for
declaration and usage.

<itemize>
<item>fast
<item>slow
<item>isfast
</itemize>

<sect1>Hardware access<p>

The following pseudo variables declared in the <tt/c16.h/ header file do
allow access to hardware located in the address space. Some variables are
structures, accessing the struct fields will access the chip registers.

<descrip>

  <tag><tt/TED/</tag>
  The <tt/TED/ structure allows access to the TED chip. See the
  <tt/_ted.h/ header file located in the include directory for the
  declaration of the structure.

  <tag><tt/COLOR_RAM/</tag>
  A character array that mirrors the color RAM of the C16 at &dollar;0800.

</descrip><p>



<sect>Loadable drivers<p>

The names in the parentheses denote the symbols to be used for static linking of the drivers.


<sect1>Graphics drivers<p>

No graphics drivers are currently available for the C16/C116.


<sect1>Extended memory drivers<p>

<descrip>

  <tag><tt/c16-ram.emd (c16_ram_emd)/</tag>
  A driver for the hidden RAM below the BASIC and KERNAL ROMs. Supports 125
  pages with 256 bytes each if the machine is equipped with 64K of memory
  (a Plus/4 or a memory extended C16/116).

</descrip><p>



<sect1>Joystick drivers<p>

<descrip>

  <tag><tt/c16-stdjoy.joy (c16_stdjoy_joy)/</tag>
  Supports up to two joysticks connected to the standard joysticks port of
  the Commodore 16/116.

</descrip><p>



<sect1>Mouse drivers<p>

No mouse drivers are currently available for the C16/C116.


<sect1>RS232 device drivers<p>

The Commodore 16 does not have a builtin ACIA and no RS232 extensions are
known. For this reason, there are no RS232 drivers available. Please note that
the standard Plus/4 driver will <em>not</em> run together with the C16
library, because the latter does not support interrupts needed by the driver.


<sect>Limitations<p>



<sect>Other hints<p>

<sect1>Passing arguments to the program<p>

Command line arguments can be passed to <tt/main()/. Since this is not
supported by BASIC, the following syntax was chosen:

<tscreen><verb>
    RUN:REM ARG1 " ARG2 IS QUOTED" ARG3 "" ARG5
</verb></tscreen>

<enum>
<item>Arguments are separated by spaces.
<item>Arguments may be quoted.
<item>Leading and trailing spaces around an argument are ignored. Spaces within
      a quoted argument are allowed.
<item>The first argument passed to <tt/main/ is the program name.
<item>A maximum number of 10 arguments (including the program name) are
      supported.
</enum>


<sect1>Program return code<p>

The program return code (low byte) is passed back to BASIC by use of the
<tt/ST/ variable.


<sect1>Interrupts<p>

The runtime for the C16 uses routines marked as <tt/.INTERRUPTOR/ for
interrupt handlers. Such routines must be written as simple machine language
subroutines and will be called automatically by the interrupt handler code
when they are linked into a program. See the discussion of the <tt/.CONDES/
feature in the <url url="ca65.html" name="assembler manual">.



<sect>License<p>

This software is provided 'as-is', without any expressed or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

<enum>
<item>	The origin of this software must not be misrepresented; you must not
	claim that you wrote the original software. If you use this software
	in a product, an acknowledgment in the product documentation would be
	appreciated but is not required.
<item>	Altered source versions must be plainly marked as such, and must not
	be misrepresented as being the original software.
<item>	This notice may not be removed or altered from any source
	distribution.
</enum>

</article>




