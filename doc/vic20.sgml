<!doctype linuxdoc system>

<article>

<title>Commodore VIC20 (aka VC20 aka VIC1001) specific information for cc65
<author>
<url url="mailto:uz@cc65.org" name="Ullrich von Bassewitz">,<newline>
<url url="mailto:polluks@sdf.lonestar.org" name="Stefan A. Haubenthal">
<date>2017-05-18

<abstract>
An overview over the VIC20 runtime system as it is implemented for the cc65 C
compiler.
</abstract>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->

<sect>Overview<p>

This file contains an overview of the VIC20 runtime system as it comes with the
cc65 C compiler. It describes the memory layout, VIC20-specific header files,
available drivers, and any pitfalls specific to that platform.

Please note that VIC20-specific functions are just mentioned here, they are
described in detail in the separate <url url="funcref.html" name="function
reference">. Even functions marked as "platform dependent" may be available on
more than one platform. Please see the function reference for more
information.


<sect>Binary format<p>

The standard binary output format generated by the linker for the VIC20 target
is a machine language program with a one line BASIC stub, which calls the
machine language part via SYS. This means that a program can be loaded as
BASIC program and started with RUN. It is of course possible to change this
behaviour by using a modified startup file and linker config.


<sect>Memory layout<p>

cc65 generated programs with the default setup run with unexpanded memory
(RAM at &dollar;A000 - &dollar;BFFF may be used for the heap),
which gives a usable memory range of &dollar;1000 - &dollar;1DFF.
All ROM entry points may be called directly without additional code.

Special locations:

<descrip>
  <tag/Text screen/
  The text screen is located at &dollar;1E00 (as in the standard setup).

  <tag/Stack/
  The C runtime stack is located at &dollar;1DFF and growing downwards.

  <tag/Heap/
  The C heap is located at the end of the program and grows towards the C
  runtime stack.

</descrip><p>



<sect>Platform-specific header files<p>

Programs containing VIC20-specific code may use the <tt/vic20.h/ or <tt/cbm.h/
header files. Using the later may be an option when writing code for more than
one CBM platform, since it includes <tt/vic20.h/ and declares several functions
common to all CBM platforms.


<sect1>VIC20-specific functions<p>

There are currently no special VIC20 functions.



<sect1>CBM-specific functions<p>

Some functions are available for all (or at least most) of the Commodore
machines. See the <url url="funcref.html" name="function reference"> for
declaration and usage.

<itemize>
<item>cbm_close
<item>cbm_closedir
<item>cbm_k_setlfs
<item>cbm_k_setnam
<item>cbm_k_load
<item>cbm_k_save
<item>cbm_k_open
<item>cbm_k_close
<item>cbm_k_readst
<item>cbm_k_chkin
<item>cbm_k_ckout
<item>cbm_k_basin
<item>cbm_k_bsout
<item>cbm_k_clrch
<item>cbm_load
<item>cbm_open
<item>cbm_opendir
<item>cbm_read
<item>cbm_readdir
<item>cbm_save
<item>cbm_write
<item>get_tv
</itemize>


<sect1>Hardware access<p>

The following pseudo variables declared in the <tt/vic20.h/ header file do allow
access to hardware located in the address space. Some variables are
structures, accessing the struct fields will access the chip registers.

<descrip>

  <tag><tt/VIC/</tag>
  The <tt/VIC/ structure allows access to the VIC (the graphics
  controller). See the <tt/_vic.h/ header file located in the include
  directory for the declaration of the structure.

  <tag><tt/VIA1, VIA2/</tag>
  Access to the two VIA (versatile interface adapter) chips is available via
  the <tt/VIA1/ and <tt/VIA2/ variables. The structure behind these variables
  is explained in <tt/_6522.h/.

  <tag><tt/COLOR_RAM/</tag>
  A character array that mirrors the color RAM of the VIC20 at &dollar;9600.

</descrip><p>



<sect>Loadable drivers<p>

The names in the parentheses denote the symbols to be used for static linking of the drivers.


<sect1>Graphics drivers<p>

No graphics drivers are currently available for the VIC20.


<sect1>Extended memory drivers<p>

No extended memory drivers are currently available for the VIC20.


<sect1>Joystick drivers<p>

The default drivers, <tt/joy_stddrv (joy_static_stddrv)/, point to <tt/vic20-stdjoy.joy (vic20_stdjoy_joy)/.

<descrip>

  <tag><tt/vic20-stdjoy.joy (vic20_stdjoy_joy)/</tag>
  Supports one standard joystick connected to the joysticks port of the VIC20.

  <tag><tt/vic20-ptvjoy.joy (vic20_ptvjoy_joy)/</tag>
  Driver for the Protovision 4-player adapter contributed by Groepaz. See
  <url url="http://www.protovision-online.de/hardw/4_player.php?language=en"
  name="Protovision shop"> for prices and building instructions. Up to three
  joysticks are supported.

</descrip><p>


<sect1>Mouse drivers<p>

No mouse drivers are currently available for the VIC20.


<sect1>RS232 device drivers<p>

No VIC1011 drivers are currently available for the VIC20.



<sect>Limitations<p>


<sect1>Escape code<p>

The CTRL key cannot be used to type most control characters,
entering an Esc is not possible.



<sect>Other hints<p>


<sect1>Passing arguments to the program<p>

Command-line arguments can be passed to <tt/main()/. Since that is not
supported directly by BASIC, the following syntax was chosen:

<tscreen><verb>
    RUN:REM ARG1 " ARG2 IS QUOTED" ARG3 "" ARG5
</verb></tscreen>

<enum>
<item>Arguments are separated by spaces.
<item>Arguments may be quoted.
<item>Leading and trailing spaces around an argument are ignored. Spaces within
      a quoted argument are allowed.
<item>The first argument passed to <tt/main()/ is the program name.
<item>A maximum number of 10 arguments (including the program name) are
      supported.
</enum>


<sect1>Program return code<p>

The program return code (low byte) is passed back to BASIC by use of the
<tt/ST/ variable.


<sect1>Using extended memory<p>

BLK5 memory may be added to the heap by using the following code:

<tscreen><verb>
    /* Check for the existence of RAM */
    if (PEEK(0xA000) == POKE(0xA000, PEEK(0xA000)+1)) {
        /* Add it to the heap */
        _heapadd ((void *) 0xA000, 0x2000);
    }
</verb></tscreen>


<sect1>Interrupts<p>

The runtime for the VIC20 uses routines marked as <tt/.INTERRUPTOR/ for
interrupt handlers. Such routines must be written as simple machine language
subroutines and will be called automatically by the interrupt handler code
when they are linked into a program. See the discussion of the <tt/.CONDES/
feature in the <url url="ca65.html" name="assembler manual">.



<sect>License<p>

This software is provided 'as-is', without any expressed or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

<enum>
<item>	The origin of this software must not be misrepresented; you must not
	claim that you wrote the original software. If you use this software
	in a product, an acknowledgment in the product documentation would be
	appreciated but is not required.
<item>	Altered source versions must be plainly marked as such, and must not
	be misrepresented as being the original software.
<item>	This notice may not be removed or altered from any source
	distribution.
</enum>

</article>
