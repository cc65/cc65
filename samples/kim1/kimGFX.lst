ca65 V2.19 - Git 30430e87b
Main file   : kimGFX.s
Current file: kimGFX.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 30430e87b
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 30430e87b"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_printf
000000r 1               	.import		_ClearScreen
000000r 1               	.import		_ScrollScreen
000000r 1               	.import		_DrawCircle
000000r 1               	.import		_SetPixel
000000r 1               	.import		_ClearPixel
000000r 1               	.import		_DrawChar
000000r 1               	.import		_DrawLine
000000r 1               	.import		_Demo
000000r 1               	.import		_ReverseBits
000000r 1               	.import		_font8x8_basic
000000r 1               	.import		_x1cord
000000r 1               	.import		_y1cord
000000r 1               	.import		_x2cord
000000r 1               	.import		_y2cord
000000r 1               	.import		_cursorX
000000r 1               	.import		_cursorY
000000r 1               	.export		_screen
000000r 1               	.export		_SETPIXEL
000000r 1               	.export		_DRAWPIXEL
000000r 1               	.export		_c
000000r 1               	.export		_DrawText
000000r 1               	.export		_DrawTextAt
000000r 1               	.export		_DrawCircleC
000000r 1               	.export		_DrawLineC
000000r 1               	.export		_MirrorFont
000000r 1               	.export		_DrawScreenMoire
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _screen:
000000r 1  00 A0        	.word	$A000
000002r 1               
000002r 1               .segment	"RODATA"
000000r 1               
000000r 1               S0004:
000000r 1  44 6F 6E 65  	.byte	$44,$6F,$6E,$65,$2C,$20,$65,$78,$69,$74,$69,$6E,$67,$2E,$2E,$2E
000004r 1  2C 20 65 78  
000008r 1  69 74 69 6E  
000010r 1  0D 0A 00     	.byte	$0D,$0A,$00
000013r 1               
000013r 1               .segment	"BSS"
000000r 1               
000000r 1               _c:
000000r 1  00 00        	.res	2,$00
000002r 1               
000002r 1               ; ---------------------------------------------------------------
000002r 1               ; void __near__ SETPIXEL (int x, int y, unsigned char b)
000002r 1               ; ---------------------------------------------------------------
000002r 1               
000002r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_SETPIXEL: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     pusha
000003r 1  A0 04        	ldy     #$04
000005r 1  20 rr rr     	jsr     ldaxysp
000008r 1  8D rr rr     	sta     _x1cord
00000Br 1  8E rr rr     	stx     _x1cord+1
00000Er 1  A0 02        	ldy     #$02
000010r 1  20 rr rr     	jsr     ldaxysp
000013r 1  8D rr rr     	sta     _y1cord
000016r 1  8E rr rr     	stx     _y1cord+1
000019r 1  A0 00        	ldy     #$00
00001Br 1  B1 rr        	lda     (sp),y
00001Dr 1  D0 03 4C rr  	jeq     L0002
000021r 1  rr           
000022r 1  20 rr rr     	jsr     _SetPixel
000025r 1  4C rr rr     	jmp     L0003
000028r 1  20 rr rr     L0002:	jsr     _ClearPixel
00002Br 1  20 rr rr     L0003:	jsr     incsp5
00002Er 1  60           	rts
00002Fr 1               
00002Fr 1               .endproc
00002Fr 1               
00002Fr 1               ; ---------------------------------------------------------------
00002Fr 1               ; void __near__ DRAWPIXEL (int x, int y)
00002Fr 1               ; ---------------------------------------------------------------
00002Fr 1               
00002Fr 1               .segment	"CODE"
00002Fr 1               
00002Fr 1               .proc	_DRAWPIXEL: near
00002Fr 1               
00002Fr 1               .segment	"CODE"
00002Fr 1               
00002Fr 1  20 rr rr     	jsr     pushax
000032r 1  A0 03        	ldy     #$03
000034r 1  20 rr rr     	jsr     ldaxysp
000037r 1  8D rr rr     	sta     _x1cord
00003Ar 1  8E rr rr     	stx     _x1cord+1
00003Dr 1  A0 01        	ldy     #$01
00003Fr 1  20 rr rr     	jsr     ldaxysp
000042r 1  8D rr rr     	sta     _y1cord
000045r 1  8E rr rr     	stx     _y1cord+1
000048r 1  20 rr rr     	jsr     _SetPixel
00004Br 1  20 rr rr     	jsr     incsp4
00004Er 1  60           	rts
00004Fr 1               
00004Fr 1               .endproc
00004Fr 1               
00004Fr 1               ; ---------------------------------------------------------------
00004Fr 1               ; void __near__ DrawText (char *psz)
00004Fr 1               ; ---------------------------------------------------------------
00004Fr 1               
00004Fr 1               .segment	"CODE"
00004Fr 1               
00004Fr 1               .proc	_DrawText: near
00004Fr 1               
00004Fr 1               .segment	"CODE"
00004Fr 1               
00004Fr 1  20 rr rr     	jsr     pushax
000052r 1  4C rr rr     	jmp     L000F
000055r 1  4C rr rr     L0002:	jmp     L0007
000058r 1  AD rr rr     L0005:	lda     _cursorX
00005Br 1  38           	sec
00005Cr 1  E9 28        	sbc     #$28
00005Er 1  8D rr rr     	sta     _cursorX
000061r 1  B0 03        	bcs     L0009
000063r 1  CE rr rr     	dec     _cursorX+1
000066r 1  AE rr rr     L0009:	ldx     _cursorX+1
000069r 1  EE rr rr     	inc     _cursorY
00006Cr 1  D0 03        	bne     L000A
00006Er 1  EE rr rr     	inc     _cursorY+1
000071r 1  AD rr rr     L000A:	lda     _cursorY
000074r 1  AE rr rr     	ldx     _cursorY+1
000077r 1  AD rr rr     L0007:	lda     _cursorX
00007Ar 1  AE rr rr     	ldx     _cursorX+1
00007Dr 1  C9 28        	cmp     #$28
00007Fr 1  8A           	txa
000080r 1  E9 00        	sbc     #$00
000082r 1  70 02        	bvs     L0008
000084r 1  49 80        	eor     #$80
000086r 1  0A           L0008:	asl     a
000087r 1  A9 00        	lda     #$00
000089r 1  A2 00        	ldx     #$00
00008Br 1  2A           	rol     a
00008Cr 1  D0 CA        	jne     L0005
00008Er 1  AD rr rr     	lda     _cursorY
000091r 1  AE rr rr     	ldx     _cursorY+1
000094r 1  C9 19        	cmp     #$19
000096r 1  8A           	txa
000097r 1  E9 00        	sbc     #$00
000099r 1  70 02        	bvs     L000C
00009Br 1  49 80        	eor     #$80
00009Dr 1  0A           L000C:	asl     a
00009Er 1  A9 00        	lda     #$00
0000A0r 1  A2 00        	ldx     #$00
0000A2r 1  2A           	rol     a
0000A3r 1  D0 03 4C rr  	jeq     L000B
0000A7r 1  rr           
0000A8r 1  A2 00        	ldx     #$00
0000AAr 1  A9 18        	lda     #$18
0000ACr 1  8D rr rr     	sta     _cursorY
0000AFr 1  8E rr rr     	stx     _cursorY+1
0000B2r 1  20 rr rr     	jsr     _ScrollScreen
0000B5r 1  A0 01        L000B:	ldy     #$01
0000B7r 1  20 rr rr     	jsr     ldaxysp
0000BAr 1  A0 00        	ldy     #$00
0000BCr 1  20 rr rr     	jsr     ldauidx
0000BFr 1  C9 0A        	cmp     #$0A
0000C1r 1  20 rr rr     	jsr     booleq
0000C4r 1  D0 03 4C rr  	jeq     L000D
0000C8r 1  rr           
0000C9r 1  A2 00        	ldx     #$00
0000CBr 1  A9 00        	lda     #$00
0000CDr 1  8D rr rr     	sta     _cursorX
0000D0r 1  8E rr rr     	stx     _cursorX+1
0000D3r 1  EE rr rr     	inc     _cursorY
0000D6r 1  D0 03        	bne     L000E
0000D8r 1  EE rr rr     	inc     _cursorY+1
0000DBr 1  A0 00        L000E:	ldy     #$00
0000DDr 1  A2 00        	ldx     #$00
0000DFr 1  A9 01        	lda     #$01
0000E1r 1  20 rr rr     	jsr     addeqysp
0000E4r 1  4C rr rr     	jmp     L000F
0000E7r 1  A0 01        L000D:	ldy     #$01
0000E9r 1  20 rr rr     	jsr     ldaxysp
0000ECr 1  A0 00        	ldy     #$00
0000EEr 1  20 rr rr     	jsr     ldauidx
0000F1r 1  8D rr rr     	sta     _c
0000F4r 1  8E rr rr     	stx     _c+1
0000F7r 1  AE rr rr     	ldx     _cursorX
0000FAr 1  AC rr rr     	ldy     _cursorY
0000FDr 1  AD rr rr     	lda     _c
000100r 1  20 rr rr     	jsr     _DrawChar
000103r 1  EE rr rr     	inc     _cursorX
000106r 1  D0 03        	bne     L0010
000108r 1  EE rr rr     	inc     _cursorX+1
00010Br 1  A0 00        L0010:	ldy     #$00
00010Dr 1  A2 00        	ldx     #$00
00010Fr 1  A9 01        	lda     #$01
000111r 1  20 rr rr     	jsr     addeqysp
000114r 1  A0 01        L000F:	ldy     #$01
000116r 1  20 rr rr     	jsr     ldaxysp
000119r 1  A0 00        	ldy     #$00
00011Br 1  20 rr rr     	jsr     ldauidx
00011Er 1  F0 03 4C rr  	jne     L0002
000122r 1  rr           
000123r 1  20 rr rr     	jsr     incsp2
000126r 1  60           	rts
000127r 1               
000127r 1               .endproc
000127r 1               
000127r 1               ; ---------------------------------------------------------------
000127r 1               ; void __near__ DrawTextAt (int x, int y, char *psz)
000127r 1               ; ---------------------------------------------------------------
000127r 1               
000127r 1               .segment	"CODE"
000127r 1               
000127r 1               .proc	_DrawTextAt: near
000127r 1               
000127r 1               .segment	"CODE"
000127r 1               
000127r 1  20 rr rr     	jsr     pushax
00012Ar 1  A0 05        	ldy     #$05
00012Cr 1  20 rr rr     	jsr     ldaxysp
00012Fr 1  8D rr rr     	sta     _cursorX
000132r 1  8E rr rr     	stx     _cursorX+1
000135r 1  A0 03        	ldy     #$03
000137r 1  20 rr rr     	jsr     ldaxysp
00013Ar 1  8D rr rr     	sta     _cursorY
00013Dr 1  8E rr rr     	stx     _cursorY+1
000140r 1  A0 01        	ldy     #$01
000142r 1  20 rr rr     	jsr     ldaxysp
000145r 1  20 rr rr     	jsr     _DrawText
000148r 1  20 rr rr     	jsr     incsp6
00014Br 1  60           	rts
00014Cr 1               
00014Cr 1               .endproc
00014Cr 1               
00014Cr 1               ; ---------------------------------------------------------------
00014Cr 1               ; void __near__ DrawCircleC (int x0, int y0, int radius, unsigned char)
00014Cr 1               ; ---------------------------------------------------------------
00014Cr 1               
00014Cr 1               .segment	"CODE"
00014Cr 1               
00014Cr 1               .proc	_DrawCircleC: near
00014Cr 1               
00014Cr 1               .segment	"CODE"
00014Cr 1               
00014Cr 1  20 rr rr     	jsr     pusha
00014Fr 1  A0 06        	ldy     #$06
000151r 1  20 rr rr     	jsr     ldaxysp
000154r 1  8D rr rr     	sta     _x1cord
000157r 1  8E rr rr     	stx     _x1cord+1
00015Ar 1  A0 04        	ldy     #$04
00015Cr 1  20 rr rr     	jsr     ldaxysp
00015Fr 1  8D rr rr     	sta     _y1cord
000162r 1  8E rr rr     	stx     _y1cord+1
000165r 1  A0 02        	ldy     #$02
000167r 1  20 rr rr     	jsr     ldaxysp
00016Ar 1  8D rr rr     	sta     _y2cord
00016Dr 1  8E rr rr     	stx     _y2cord+1
000170r 1  20 rr rr     	jsr     _DrawCircle
000173r 1  20 rr rr     	jsr     incsp7
000176r 1  60           	rts
000177r 1               
000177r 1               .endproc
000177r 1               
000177r 1               ; ---------------------------------------------------------------
000177r 1               ; void __near__ DrawLineC (int x1, int y1, int x2, int y2)
000177r 1               ; ---------------------------------------------------------------
000177r 1               
000177r 1               .segment	"CODE"
000177r 1               
000177r 1               .proc	_DrawLineC: near
000177r 1               
000177r 1               .segment	"CODE"
000177r 1               
000177r 1  20 rr rr     	jsr     pushax
00017Ar 1  A0 07        	ldy     #$07
00017Cr 1  20 rr rr     	jsr     ldaxysp
00017Fr 1  8D rr rr     	sta     _x1cord
000182r 1  8E rr rr     	stx     _x1cord+1
000185r 1  A0 05        	ldy     #$05
000187r 1  20 rr rr     	jsr     ldaxysp
00018Ar 1  8D rr rr     	sta     _y1cord
00018Dr 1  8E rr rr     	stx     _y1cord+1
000190r 1  A0 03        	ldy     #$03
000192r 1  20 rr rr     	jsr     ldaxysp
000195r 1  8D rr rr     	sta     _x2cord
000198r 1  8E rr rr     	stx     _x2cord+1
00019Br 1  A0 01        	ldy     #$01
00019Dr 1  20 rr rr     	jsr     ldaxysp
0001A0r 1  8D rr rr     	sta     _y2cord
0001A3r 1  8E rr rr     	stx     _y2cord+1
0001A6r 1  20 rr rr     	jsr     _DrawLine
0001A9r 1  20 rr rr     	jsr     incsp8
0001ACr 1  60           	rts
0001ADr 1               
0001ADr 1               .endproc
0001ADr 1               
0001ADr 1               ; ---------------------------------------------------------------
0001ADr 1               ; void __near__ MirrorFont (void)
0001ADr 1               ; ---------------------------------------------------------------
0001ADr 1               
0001ADr 1               .segment	"CODE"
0001ADr 1               
0001ADr 1               .proc	_MirrorFont: near
0001ADr 1               
0001ADr 1               .segment	"CODE"
0001ADr 1               
0001ADr 1  20 rr rr     	jsr     decsp2
0001B0r 1  A9 rr        	lda     #<(_font8x8_basic)
0001B2r 1  A2 rr        	ldx     #>(_font8x8_basic)
0001B4r 1  20 rr rr     	jsr     pushax
0001B7r 1  A2 00        	ldx     #$00
0001B9r 1  A9 00        	lda     #$00
0001BBr 1  A0 02        	ldy     #$02
0001BDr 1  20 rr rr     	jsr     staxysp
0001C0r 1  A0 03        L0002:	ldy     #$03
0001C2r 1  20 rr rr     	jsr     ldaxysp
0001C5r 1  C9 00        	cmp     #$00
0001C7r 1  8A           	txa
0001C8r 1  E9 04        	sbc     #$04
0001CAr 1  50 02        	bvc     L0006
0001CCr 1  49 80        	eor     #$80
0001CEr 1  0A           L0006:	asl     a
0001CFr 1  A9 00        	lda     #$00
0001D1r 1  A2 00        	ldx     #$00
0001D3r 1  2A           	rol     a
0001D4r 1  F0 03 4C rr  	jne     L0005
0001D8r 1  rr           
0001D9r 1  4C rr rr     	jmp     L0003
0001DCr 1  A0 01        L0005:	ldy     #$01
0001DEr 1  20 rr rr     	jsr     ldaxysp
0001E1r 1  20 rr rr     	jsr     pushax
0001E4r 1  A0 05        	ldy     #$05
0001E6r 1  20 rr rr     	jsr     ldaxysp
0001E9r 1  20 rr rr     	jsr     tosaddax
0001ECr 1  20 rr rr     	jsr     pushax
0001EFr 1  A0 03        	ldy     #$03
0001F1r 1  20 rr rr     	jsr     ldaxysp
0001F4r 1  20 rr rr     	jsr     pushax
0001F7r 1  A0 07        	ldy     #$07
0001F9r 1  20 rr rr     	jsr     ldaxysp
0001FCr 1  20 rr rr     	jsr     tosaddax
0001FFr 1  A0 00        	ldy     #$00
000201r 1  20 rr rr     	jsr     ldauidx
000204r 1  20 rr rr     	jsr     _ReverseBits
000207r 1  A0 00        	ldy     #$00
000209r 1  20 rr rr     	jsr     staspidx
00020Cr 1  A0 02        	ldy     #$02
00020Er 1  A2 00        	ldx     #$00
000210r 1  A9 01        	lda     #$01
000212r 1  20 rr rr     	jsr     addeqysp
000215r 1  4C rr rr     	jmp     L0002
000218r 1  20 rr rr     L0003:	jsr     incsp4
00021Br 1  60           	rts
00021Cr 1               
00021Cr 1               .endproc
00021Cr 1               
00021Cr 1               ; ---------------------------------------------------------------
00021Cr 1               ; void __near__ DrawScreenMoire (int left, int top, int right, int bottom)
00021Cr 1               ; ---------------------------------------------------------------
00021Cr 1               
00021Cr 1               .segment	"CODE"
00021Cr 1               
00021Cr 1               .proc	_DrawScreenMoire: near
00021Cr 1               
00021Cr 1               .segment	"CODE"
00021Cr 1               
00021Cr 1  20 rr rr     	jsr     pushax
00021Fr 1  20 rr rr     	jsr     decsp4
000222r 1  A0 0B        	ldy     #$0B
000224r 1  20 rr rr     	jsr     ldaxysp
000227r 1  20 rr rr     	jsr     pushax
00022Ar 1  A0 0B        	ldy     #$0B
00022Cr 1  20 rr rr     	jsr     ldaxysp
00022Fr 1  20 rr rr     	jsr     pushax
000232r 1  A0 0B        	ldy     #$0B
000234r 1  20 rr rr     	jsr     ldaxysp
000237r 1  20 rr rr     	jsr     pushax
00023Ar 1  A0 0F        	ldy     #$0F
00023Cr 1  20 rr rr     	jsr     ldaxysp
00023Fr 1  20 rr rr     	jsr     _DrawLineC
000242r 1  A0 0B        	ldy     #$0B
000244r 1  20 rr rr     	jsr     ldaxysp
000247r 1  20 rr rr     	jsr     pushax
00024Ar 1  A0 07        	ldy     #$07
00024Cr 1  20 rr rr     	jsr     ldaxysp
00024Fr 1  20 rr rr     	jsr     pushax
000252r 1  A0 0B        	ldy     #$0B
000254r 1  20 rr rr     	jsr     ldaxysp
000257r 1  20 rr rr     	jsr     pushax
00025Ar 1  A0 0B        	ldy     #$0B
00025Cr 1  20 rr rr     	jsr     ldaxysp
00025Fr 1  20 rr rr     	jsr     _DrawLineC
000262r 1  A0 0B        	ldy     #$0B
000264r 1  20 rr rr     	jsr     ldaxysp
000267r 1  20 rr rr     	jsr     pushax
00026Ar 1  A0 0B        	ldy     #$0B
00026Cr 1  20 rr rr     	jsr     ldaxysp
00026Fr 1  20 rr rr     	jsr     pushax
000272r 1  A0 0F        	ldy     #$0F
000274r 1  20 rr rr     	jsr     ldaxysp
000277r 1  20 rr rr     	jsr     pushax
00027Ar 1  A0 0B        	ldy     #$0B
00027Cr 1  20 rr rr     	jsr     ldaxysp
00027Fr 1  20 rr rr     	jsr     _DrawLineC
000282r 1  A0 07        	ldy     #$07
000284r 1  20 rr rr     	jsr     ldaxysp
000287r 1  20 rr rr     	jsr     pushax
00028Ar 1  A0 0B        	ldy     #$0B
00028Cr 1  20 rr rr     	jsr     ldaxysp
00028Fr 1  20 rr rr     	jsr     pushax
000292r 1  A0 0B        	ldy     #$0B
000294r 1  20 rr rr     	jsr     ldaxysp
000297r 1  20 rr rr     	jsr     pushax
00029Ar 1  A0 0B        	ldy     #$0B
00029Cr 1  20 rr rr     	jsr     ldaxysp
00029Fr 1  20 rr rr     	jsr     _DrawLineC
0002A2r 1  A0 0B        	ldy     #$0B
0002A4r 1  20 rr rr     	jsr     ldaxysp
0002A7r 1  A0 02        	ldy     #$02
0002A9r 1  20 rr rr     	jsr     staxysp
0002ACr 1  A0 03        L0002:	ldy     #$03
0002AEr 1  20 rr rr     	jsr     ldaxysp
0002B1r 1  20 rr rr     	jsr     pushax
0002B4r 1  A0 09        	ldy     #$09
0002B6r 1  20 rr rr     	jsr     ldaxysp
0002B9r 1  20 rr rr     	jsr     tosltax
0002BCr 1  F0 03 4C rr  	jne     L0005
0002C0r 1  rr           
0002C1r 1  4C rr rr     	jmp     L0003
0002C4r 1  A0 03        L0005:	ldy     #$03
0002C6r 1  20 rr rr     	jsr     ldaxysp
0002C9r 1  20 rr rr     	jsr     pushax
0002CCr 1  A0 0B        	ldy     #$0B
0002CEr 1  20 rr rr     	jsr     ldaxysp
0002D1r 1  20 rr rr     	jsr     pushax
0002D4r 1  A0 0B        	ldy     #$0B
0002D6r 1  20 rr rr     	jsr     ldaxysp
0002D9r 1  20 rr rr     	jsr     pushax
0002DCr 1  A0 09        	ldy     #$09
0002DEr 1  20 rr rr     	jsr     ldaxysp
0002E1r 1  20 rr rr     	jsr     tossubax
0002E4r 1  20 rr rr     	jsr     pushax
0002E7r 1  A0 11        	ldy     #$11
0002E9r 1  20 rr rr     	jsr     ldaxysp
0002ECr 1  20 rr rr     	jsr     tosaddax
0002EFr 1  20 rr rr     	jsr     pushax
0002F2r 1  A0 0B        	ldy     #$0B
0002F4r 1  20 rr rr     	jsr     ldaxysp
0002F7r 1  20 rr rr     	jsr     _DrawLineC
0002FAr 1  A0 02        	ldy     #$02
0002FCr 1  A2 00        	ldx     #$00
0002FEr 1  A9 06        	lda     #$06
000300r 1  20 rr rr     	jsr     addeqysp
000303r 1  4C rr rr     	jmp     L0002
000306r 1  A0 09        L0003:	ldy     #$09
000308r 1  20 rr rr     	jsr     ldaxysp
00030Br 1  A0 00        	ldy     #$00
00030Dr 1  20 rr rr     	jsr     staxysp
000310r 1  A0 01        L0006:	ldy     #$01
000312r 1  20 rr rr     	jsr     ldaxysp
000315r 1  20 rr rr     	jsr     pushax
000318r 1  A0 07        	ldy     #$07
00031Ar 1  20 rr rr     	jsr     ldaxysp
00031Dr 1  20 rr rr     	jsr     tosltax
000320r 1  F0 03 4C rr  	jne     L0009
000324r 1  rr           
000325r 1  4C rr rr     	jmp     L0007
000328r 1  A0 0B        L0009:	ldy     #$0B
00032Ar 1  20 rr rr     	jsr     ldaxysp
00032Dr 1  20 rr rr     	jsr     pushax
000330r 1  A0 03        	ldy     #$03
000332r 1  20 rr rr     	jsr     ldaxysp
000335r 1  20 rr rr     	jsr     pushax
000338r 1  A0 0B        	ldy     #$0B
00033Ar 1  20 rr rr     	jsr     ldaxysp
00033Dr 1  20 rr rr     	jsr     pushax
000340r 1  A0 0B        	ldy     #$0B
000342r 1  20 rr rr     	jsr     ldaxysp
000345r 1  20 rr rr     	jsr     pushax
000348r 1  A0 09        	ldy     #$09
00034Ar 1  20 rr rr     	jsr     ldaxysp
00034Dr 1  20 rr rr     	jsr     tossubax
000350r 1  20 rr rr     	jsr     pushax
000353r 1  A0 11        	ldy     #$11
000355r 1  20 rr rr     	jsr     ldaxysp
000358r 1  20 rr rr     	jsr     tosaddax
00035Br 1  20 rr rr     	jsr     _DrawLineC
00035Er 1  A0 00        	ldy     #$00
000360r 1  A2 00        	ldx     #$00
000362r 1  A9 06        	lda     #$06
000364r 1  20 rr rr     	jsr     addeqysp
000367r 1  4C rr rr     	jmp     L0006
00036Ar 1  A0 0C        L0007:	ldy     #$0C
00036Cr 1  20 rr rr     	jsr     addysp
00036Fr 1  60           	rts
000370r 1               
000370r 1               .endproc
000370r 1               
000370r 1               ; ---------------------------------------------------------------
000370r 1               ; int __near__ main (void)
000370r 1               ; ---------------------------------------------------------------
000370r 1               
000370r 1               .segment	"CODE"
000370r 1               
000370r 1               .proc	_main: near
000370r 1               
000370r 1               .segment	"CODE"
000370r 1               
000370r 1  20 rr rr     	jsr     decsp2
000373r 1  4C rr rr     	jmp     L0006
000376r 1  20 rr rr     L0002:	jsr     _ClearScreen
000379r 1  20 rr rr     	jsr     _Demo
00037Cr 1  A2 00        	ldx     #$00
00037Er 1  A9 00        	lda     #$00
000380r 1  20 rr rr     	jsr     pushax
000383r 1  A2 00        	ldx     #$00
000385r 1  A9 1E        	lda     #$1E
000387r 1  20 rr rr     	jsr     pushax
00038Ar 1  A2 01        	ldx     #$01
00038Cr 1  A9 3F        	lda     #$3F
00038Er 1  20 rr rr     	jsr     pushax
000391r 1  A2 00        	ldx     #$00
000393r 1  A9 C7        	lda     #$C7
000395r 1  20 rr rr     	jsr     _DrawScreenMoire
000398r 1  20 rr rr     	jsr     _ClearScreen
00039Br 1  20 rr rr     	jsr     _Demo
00039Er 1  A2 00        	ldx     #$00
0003A0r 1  A9 05        	lda     #$05
0003A2r 1  A0 00        	ldy     #$00
0003A4r 1  20 rr rr     	jsr     staxysp
0003A7r 1  A0 01        L0005:	ldy     #$01
0003A9r 1  20 rr rr     	jsr     ldaxysp
0003ACr 1  C9 50        	cmp     #$50
0003AEr 1  8A           	txa
0003AFr 1  E9 00        	sbc     #$00
0003B1r 1  50 02        	bvc     L0009
0003B3r 1  49 80        	eor     #$80
0003B5r 1  0A           L0009:	asl     a
0003B6r 1  A9 00        	lda     #$00
0003B8r 1  A2 00        	ldx     #$00
0003BAr 1  2A           	rol     a
0003BBr 1  F0 03 4C rr  	jne     L0008
0003BFr 1  rr           
0003C0r 1  4C rr rr     	jmp     L0006
0003C3r 1  A2 00        L0008:	ldx     #$00
0003C5r 1  A9 A0        	lda     #$A0
0003C7r 1  20 rr rr     	jsr     pushax
0003CAr 1  A2 00        	ldx     #$00
0003CCr 1  A9 78        	lda     #$78
0003CEr 1  20 rr rr     	jsr     pushax
0003D1r 1  A0 05        	ldy     #$05
0003D3r 1  20 rr rr     	jsr     ldaxysp
0003D6r 1  20 rr rr     	jsr     pushax
0003D9r 1  A2 00        	ldx     #$00
0003DBr 1  A9 01        	lda     #$01
0003DDr 1  20 rr rr     	jsr     _DrawCircleC
0003E0r 1  A0 00        	ldy     #$00
0003E2r 1  A2 00        	ldx     #$00
0003E4r 1  A9 05        	lda     #$05
0003E6r 1  20 rr rr     	jsr     addeqysp
0003E9r 1  4C rr rr     	jmp     L0005
0003ECr 1  4C rr rr     L0006:	jmp     L0002
0003EFr 1  A9 rr        	lda     #<(S0004)
0003F1r 1  A2 rr        	ldx     #>(S0004)
0003F3r 1  20 rr rr     	jsr     pushax
0003F6r 1  A0 02        	ldy     #$02
0003F8r 1  20 rr rr     	jsr     _printf
0003FBr 1  A2 00        	ldx     #$00
0003FDr 1  A9 00        	lda     #$00
0003FFr 1  4C rr rr     	jmp     L0001
000402r 1  20 rr rr     L0001:	jsr     incsp2
000405r 1  60           	rts
000406r 1               
000406r 1               .endproc
000406r 1               
000406r 1               
